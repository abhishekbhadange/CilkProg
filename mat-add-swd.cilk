#include <stdio.h>
#include <stdlib.h>
#include <cilk-lib.cilkh>

cilk int** createMatrix(int msize)
{
	int** x;
	int* temp;
	int i;
	
	x = (int**)malloc(msize * sizeof(int*));
	temp = (int*)malloc(msize * msize * sizeof(int));
	for(i=0; i < msize; i++)
	{
		x[i] = temp + (i * msize);
	}
	return x;
} 

cilk void loadMatrix(int** x, int flag, int msize)
{
	int i, j, value;
	if(flag==0)
	{
		for(i=0; i<msize; i++)
		{
			for(j=0; j<msize; j++)
			{
				x[i][j] = -1;
			}
		}	
	}
	else
	{
		for(i=0; i<msize; i++)
		{
			for(j=0; j<msize; j++)
			{
				value = (int)(rand_r(&flag)%500);
				x[i][j] = value;
			}
		}
	}
}

void printMatrix(int** x, int msize)
{
	int i,j;
	for(i=0; i<msize; i++)
	{
		printf("\n");
		for(j=0; j<msize; j++)
		{
			printf("ary[%d][%d] = %d ",i ,j , x[i][j]);
		}
	}	
	printf("\n\n");
}

cilk int addMatrices(int** A, int** B, int** C, int chunk, int size, int ctr)
{
	int i, j;
	for(i=ctr; i<chunk; i++)
	{
		ctr++;
		for(j=0; j<size; j++)
		{
			C[i][j] = A[i][j] + B[i][j];
		}
	}
	return ctr;
}

cilk int main(int argc, char *argv[])
{
	int** A; 
	int** B;
	int** C;
	int n, split, ctr = 0, i, nchunk, chunk, catch;
	
	Cilk_time tm_begin, tm_elapsed;
	Cilk_time wk_begin, wk_elapsed;
	Cilk_time cp_begin, cp_elapsed;

	sync;
	cp_begin = Cilk_user_critical_path;
	wk_begin = Cilk_user_work;
	tm_begin = Cilk_get_wall_time();
	
	if (argc != 3) 
	{
		fprintf(stderr, "Usage: fib [<cilk options>] <n>\n");
		Cilk_exit(1);
        }
	
	n = atoi(argv[2]);
	A = spawn createMatrix(n);
	B = spawn createMatrix(n);
	C = spawn createMatrix(n);
	sync;

	spawn loadMatrix(A, 27, n);
	spawn loadMatrix(B, 53, n);
	spawn loadMatrix(C, 0, n);
	sync;
	
	printf("\nMatrix A loaded with random numbers:\n");
	printMatrix(A,n);
	printf("Matrix B loaded with random numbers:\n");
	printMatrix(B,n);
	printf("Matrix C loaded with -1's:\n");
	printMatrix(C,n);

	split = atoi(argv[1]);
	chunk = (int)(n/split);
	
	for(i=0; i<split; i++)
	{
		if(ctr == 0)
		{
			catch = spawn addMatrices(A, B, C, chunk, n, ctr);
			sync;
			ctr = catch;
		}
		else if(i == split - 1)
		{
			nchunk = n;
			catch = spawn addMatrices(A, B, C, nchunk, n, ctr);	
			sync;
		}
		else
		{
			nchunk = catch + chunk;
			catch = spawn addMatrices(A, B, C, nchunk, n, ctr);	
			sync;
		}
	}	
	
	printf("Matrix C holds result after A[]+B[]:\n");
	printMatrix(C,n);
	
	free(A);
	free(B);
	free(C);
	
	tm_elapsed = Cilk_get_wall_time() - tm_begin;
	wk_elapsed = Cilk_user_work - wk_begin;
	cp_elapsed = Cilk_user_critical_path - cp_begin;

	printf("Cilk Example: Matrix addition using Static Work Division\n");
	printf("running on %d processor(s)\n\n", Cilk_active_size);
	printf("Running time = %4f s\n", Cilk_wall_time_to_sec(tm_elapsed));
	printf("Work         = %4f s\n", Cilk_time_to_sec(wk_elapsed));
	printf("Span         = %4f s\n\n", Cilk_time_to_sec(cp_elapsed));
	
	return 0;
}
